/// <reference types="Cypress" />

describe('Central de Atendimento ao Cliente TAT', function() { //definindo suite de testes
    beforeEach(function() {
        cy.visit('./src/index.html')
    })
    it('verifica o título da aplicação', function() { //definindo um caso de teste
        cy.title().should('be.equal','Central de Atendimento ao Cliente TAT')
    })
    it('preenche os campos obrigatórios e envia o formulário', function() { //definindo um caso de teste
        cy.clock()
        const longText = "Teste, teste, teste, teste, teste, teste, teste, teste, teste, teste, teste, teste, teste, teste, teste, teste, teste, teste, teste, teste, teste testes teste teste teste teste teste teste teste teste teste teste teste testes teste teste teste teste teste teste teste teste teste testeteste testes teste teste teste teste teste teste teste teste teste testeteste testes teste teste teste teste teste teste teste teste teste testeteste testes teste teste teste teste teste teste teste teste teste testeteste testes teste teste teste teste teste teste teste teste teste teste"
        cy.get('#firstName').type('Lucas')
        cy.get('#lastName').type('Ferreira')
        cy.get('#email').type('elucasferreira@gmail.com')
        cy.get('#open-text-area').type(longText, {delay:0 })
        cy.get('button[type="submit"]').click()
        cy.get('.success').should('be.visible')
        cy.tick(3000)
        cy.get('.success').should('not.be.visible')
    })
    it('exibe mensagem de erro ao submeter o formulário com um email com formatação inválida', function() { //definindo um caso de teste
        cy.clock()
        cy.get('#firstName').type('Lucas')
        cy.get('#lastName').type('Ferreira')
        cy.get('#email').type('elucasferreira@gmail,com')
        cy.get('#open-text-area').type('teste')
        cy.get('button[type="submit"]').click()
        cy.get('.error').should('be.visible')
        cy.tick(3000)
        cy.get('.error').should('not.be.visible')
    })
    it('campo telefone continua vazio quando preenchido com valor não-numérico', function() { //definindo um caso de teste
        cy.get('#phone')
            .type('abcdefghij')
            .should('have.value', '')        
    })
    it('exibe mensagem de erro quando o telefone se torna obrigatório mas não é preenchido antes do envio do formulário', function() { //definindo um caso de teste
        cy.clock()
        cy.get('#firstName').type('Lucas')
        cy.get('#lastName').type('Ferreira')
        cy.get('#email').type('elucasferreira@gmail.com')
        cy.get('#phone-checkbox').click()
        cy.get('#open-text-area').type('teste')
        cy.get('button[type="submit"]').click()
        cy.get('.error').should('be.visible')
        cy.tick(3000)
        cy.get('.error').should('not.be.visible')
  })
  it('preenche e limpa os campos nome, sobrenome, email e telefone', function() { //definindo um caso de teste
    cy.get('#firstName')
        .type('Lucas')
        .should('have.value', 'Lucas')
        .clear()
        .should('have.value', '')
    cy.get('#lastName')
        .type('Ferreira')
        .should('have.value', 'Ferreira')
        .clear()
        .should('have.value', '')    
    cy.get('#email')
        .type('elucasferreira@gmail.com')
        .should('have.value', 'elucasferreira@gmail.com')
        .clear()
        .should('have.value', '')    
    cy.get('#open-text-area')
        .type('test')
        .should('have.value', 'test')
        .clear()
        .should('have.value', '')    
})
    it('exibe mensagem de erro ao submeter o formulário sem preencher os campos obrigatórios', function() { //definindo um caso de teste
    cy.clock()
    cy.get('button[type="submit"]').click()
    cy.get('.error').should('be.visible')    
    cy.tick(3000)
    cy.get('.error').should('not.be.visible')
})
    it('envia o formuário com sucesso usando um comando customizado', function() { //definindo um caso de teste
   cy.clock()
    cy.fillMandatoryFieldsAndSubmit()
   cy.get('.success').should('be.visible')
   cy.tick(3000)
   cy.get('.error').should('not.be.visible')
})
    it('envia o formuário com sucesso usando o cy.contains', function() { //definindo um caso de teste
    cy.clock()
    cy.get('#firstName').type('Lucas')
    cy.get('#lastName').type('Ferreira')
    cy.get('#email').type('elucasferreira@gmail.com')
    cy.get('#open-text-area').type('test')
    cy.contains('button','Enviar').click()
    cy.get('.success').should('be.visible')
    cy.tick(3000)
    cy.get('.error').should('not.be.visible')
 })
    it('seleciona um produto (youtube) por seu texto', function() {
    cy.get('#product')
    .select('YouTube')
    .should('have.value', 'youtube')
 })
    it('seleciona um produto (Mentoria) por seu valor (value)', function(){
    cy.get('#product')
    .select('mentoria')
    .should('have.value', 'mentoria')
})
    it('seleciona um produto (Blog) por seu indice', function(){
    cy.get('#product')
    .select(1)
    .should('have.value', 'blog')
})
    it('marca o tipo de atendimento "Feedbback"', function(){
    cy.get('input[type="radio"][value="feedback"]').check().should('be.checked')
})
    it('marca cada tipo de atendimento', function(){
    cy.get('input[type="radio"]')
    .should('have.length', 3)
    .each(function($radio) {
    cy.wrap($radio).check()    
    cy.wrap($radio).should('be.checked')
    })
})
    it('marca ambos checkboxes, depois desmarca o último', function(){
   cy.get('input[type="checkbox"') 
   .should('have.length', 2)
   .check()
   .last().uncheck()
   .should('not.be.checked')
})
    it('exibe mensagem de erro quando o telefone se torna obrigatório mas não é preenchido antes do envio do formulário', function(){
    cy.clock()
    cy.get('#firstName').type('Lucas')
    cy.get('#lastName').type('Ferreira')
    cy.get('#email').type('elucasferreira@gmail.com')
    cy.get('#phone-checkbox').check()
    cy.get('#open-text-area').type('teste')
    cy.get('button[type="submit"]').click()
    cy.get('.error').should('be.visible')
    cy.tick(3000)
    cy.get('.error').should('not.be.visible')
 })
    it('seleciona um arquivo da pasta fixtures', function(){
    cy.get('input[type="file"]')
    .should('not.have.value')
    .selectFile('cypress/fixtures/example.json')
    .should(function($input){
        expect($input[0].files[0].name).to.equal('example.json')
    })
 })
    it('seleciona um arquivo simulando um drag-and-drop', function(){
    cy.get('input[type="file"]')
    .should('not.have.value')
    .selectFile('cypress/fixtures/example.json', { action: 'drag-drop'})
    .should(function($input){
        expect($input[0].files[0].name).to.equal('example.json')
    })
 })
    it('seleciona um arquivo utilizando uma fixture para a qual foi dada um alias', function(){
    cy.fixture('example.json').as('sampleFile')
    cy.get('input[type="file"]')
    .selectFile('@sampleFile')
    .should(function($input){
        expect($input[0].files[0].name).to.equal('example.json')
    })
 })
    it('verifica que a política de privacidade abre em outra aba sem a necessidade de um clique', function(){
    cy.get('#privacy a').should('have.attr', 'target', '_blank')
 })
    it('acessa a pagina da politica de privacidade removendo o target e então clicando no link', function(){
    cy.get('#privacy a')
    .invoke('removeAttr', 'target')
    .click()
    
    cy.contains('Talking About Test').should('be.visible')
})
    it('exibe e esconde as mensagens de sucesso e erro usando o .invoke', () => {
    cy.get('.success')
      .should('not.be.visible')
      .invoke('show')
      .should('be.visible')
      .and('contain', 'Mensagem enviada com sucesso.')
      .invoke('hide')
      .should('not.be.visible')
    cy.get('.error')
      .should('not.be.visible')
      .invoke('show')
      .should('be.visible')
      .and('contain', 'Valide os campos obrigatórios!')
      .invoke('hide')
      .should('not.be.visible')
  })
    it('preenche a area de texto usando o comando invoke', () =>{
    cy.get('#firstName').invoke('val', 'Lucas')
    cy.get('#lastName').invoke('val', 'Ferreira')
    cy.get('#email').invoke('val', 'elucasferreira@gmail.com')
    cy.get('#open-text-area').invoke('val', 'teste')
    cy.get('button[type="submit"]').click()
    cy.get('.success').should('be.visible')
    })
    it('faz uma requisição http', () => {
        cy.request('https://cac-tat.s3.eu-central-1.amazonaws.com/index.html')
            .as('getRequest')
            .its('status')
            .should('be.equal', 200)
        cy.get('@getRequest')
            .its('statusText')
            .should('be.equal', 'OK')
        cy.get('@getRequest')
            .its('body')
            .should('include', 'CAC TAT')
    })
    it.only('encontre o gato', () => {
        cy.get('#cat')
          .should('not.be.visible')
          .invoke('show')
          .should('be.visible')
          .invoke('hide')
          .should('not.be.visible')
      })
})

